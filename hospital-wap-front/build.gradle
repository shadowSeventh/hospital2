apply plugin: 'distribution'

dependencies {

}


distributions {
//    dev {
//        baseName = project.name
//    }
    test12 {
        baseName = project.name
    }
    test13 {
        baseName = project.name
    }
    test14 {
        baseName = project.name
    }
    main {  // prod
        baseName = project.name
    }
}

//void sss(name, t) {
//    println """
//===================== ${name}
//group       : ${t.group}
//version     : ${t.version}
//baseName    : ${t.baseName}
//"""
//}
//
//task hi() {
//    sss("distTar", distTar)
//}
//task listPlugins() {
//    project.plugins.each {
//        println it
//    }
//}
//task ddd << {
//    println "-----------"+System.properties['npmPath']
//}
//
//task sss(type:Exec){
////    commandLine "which", 'npm'
//    commandLine "npm", 'ls'
//}

String npmSysProp = System.properties['npm']
String npm = npmSysProp ?: "/usr/local/bin/npm"

logger.warn("""
现在使用 npm 的路径为： $npm
如果 npm 执行出错，请通过系统属性 npm 给出 npm 的绝对路径。 比如

    ./gradlew -Dnpm=`which npm` 

""")

//task buildDev() {
//    group "build"
//
//    doFirst {
//        mkdir('src/dev/dist')
//    }
//
//    doLast {
//        delete fileTree('src/dev/dist').include('**/*')
//        exec {
//            commandLine "${npm}", "run", "webpack", "--", "--env.env=dev", "--env.out=src/dev/dist"
//        }
//    }
//
//}
//
//// A POM cannot have multiple artifacts with the same type and classifier.
//// 请参考 DefaultArtifactPom.ArtifactKey : type+classifier 必须唯一。
//tasks.devDistTar.dependsOn buildDev
//tasks.devDistTar.classifier = "dev"
//tasks.devDistTar.compression = Compression.GZIP
//
//tasks.devDistZip.dependsOn buildDev
//tasks.devDistZip.classifier = "dev"

task buildTest12() {
    group "build"

    doLast {
        ConfigurableFileTree ft = fileTree('src/test12/dist')
        ft.exclude(".gitkeep")
        ft.visit { FileVisitDetails fvd ->
            delete fvd.file
        }
        project.exec {
            commandLine "${npm}", "run", "webpack", "--", "--env.env=test12", "--env.out=src/test12/dist"
        }
    }
}

tasks.test12DistTar.dependsOn buildTest12
tasks.test12DistTar.classifier = "test12"
tasks.test12DistTar.compression = Compression.GZIP

tasks.test12DistZip.dependsOn buildTest12
tasks.test12DistZip.classifier = "test12"

task buildTest13() {
    group "build"

    doLast {
        ConfigurableFileTree ft = fileTree('src/test13/dist')
        ft.exclude(".gitkeep")
        ft.visit { FileVisitDetails fvd ->
            delete fvd.file
        }
        project.exec {
            commandLine "${npm}", "run", "webpack", "--", "--env.env=test13", "--env.out=src/test13/dist"
        }
    }
}

tasks.test13DistTar.dependsOn buildTest13
tasks.test13DistTar.classifier = "test13"
tasks.test13DistTar.compression = Compression.GZIP

tasks.test13DistZip.dependsOn buildTest13
tasks.test13DistZip.classifier = "test13"


task buildTest14() {
    group "build"

    doLast {
        ConfigurableFileTree ft = fileTree('src/test14/dist')
        ft.exclude(".gitkeep")
        ft.visit { FileVisitDetails fvd ->
            delete fvd.file
        }
        project.exec {
            commandLine "${npm}", "run", "webpack", "--", "--env.env=test14", "--env.out=src/test14/dist"
        }
    }
}
tasks.test14DistTar.dependsOn buildTest14
tasks.test14DistTar.classifier = "test14"
tasks.test14DistTar.compression = Compression.GZIP

tasks.test14DistZip.dependsOn buildTest14
tasks.test14DistZip.classifier = "test14"

task buildProd() {
    group "build"

    doLast {
        ConfigurableFileTree ft = fileTree('src/main/dist')
        ft.exclude(".gitkeep")
        ft.visit { FileVisitDetails fvd ->
            delete fvd.file
        }
        project.exec {
            commandLine "${npm}", "run", "webpack", "--", "--env.env=prod", "--env.out=src/main/dist"
        }
    }
}
tasks.distTar.dependsOn buildProd
tasks.distTar.compression = Compression.GZIP

tasks.distZip.dependsOn buildProd
//
//task listDistributions() {
//
//    DefaultDistributionContainer c = project.extensions.getByName("distributions")
//    c.forEach { Distribution d ->
//        println """
//===================== listDistributions :  ${d}
//name        : ${d.name}
//baseName    : ${d.baseName}
//"""
//    }
//
//}
//
//task listArtifacts() {
//    Configuration c = project.configurations.getByName("archives")
//    c.getArtifacts().forEach { PublishArtifact a ->
//        println """
//===================== listArtifacts :  ${a}
//name        : ${a.name}
//type        : ${a.type}
//extension   : ${a.extension}
//classifier  : ${a.classifier}
//"""
//    }
//}

//artifacts {
//    //archives javadocJar
//}





